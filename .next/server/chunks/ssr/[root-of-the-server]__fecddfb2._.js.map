{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 223, "column": 0}, "map": {"version":3,"sources":["file:///D:/h2skill/Manas_Mitra_Chatbot/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\r\nimport {googleAI} from '@genkit-ai/googleai';\r\n\r\nexport const ai = genkit({\r\n  plugins: [googleAI()],\r\n  model: 'googleai/gemini-2.5-flash',\r\n});\r\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 244, "column": 0}, "map": {"version":3,"sources":["file:///D:/h2skill/Manas_Mitra_Chatbot/src/ai/flows/daily-affirmations.ts"],"sourcesContent":["'use server';\r\n\r\n/**\r\n * @fileOverview A flow for generating daily affirmations for youth.\r\n *\r\n * - generateAffirmation - A function that generates an encouraging affirmation.\r\n * - GenerateAffirmationInput - The input type for the generateAffirmation function.\r\n * - GenerateAffirmationOutput - The return type for the generateAffirmation function.\r\n */\r\n\r\nimport {ai} from '@/ai/genkit';\r\nimport {z} from 'genkit';\r\n\r\nconst GenerateAffirmationInputSchema = z.object({\r\n  mood: z\r\n    .string()\r\n    .optional()\r\n    .describe('The current mood of the user, can be positive or negative.'),\r\n});\r\nexport type GenerateAffirmationInput = z.infer<typeof GenerateAffirmationInputSchema>;\r\n\r\nconst GenerateAffirmationOutputSchema = z.object({\r\n  affirmation: z.string().describe('An encouraging and supportive affirmation.'),\r\n});\r\nexport type GenerateAffirmationOutput = z.infer<typeof GenerateAffirmationOutputSchema>;\r\n\r\nexport async function generateAffirmation(\r\n  input: GenerateAffirmationInput\r\n): Promise<GenerateAffirmationOutput> {\r\n  return generateAffirmationFlow(input);\r\n}\r\n\r\nconst prompt = ai.definePrompt({\r\n  name: 'generateAffirmationPrompt',\r\n  input: {schema: GenerateAffirmationInputSchema},\r\n  output: {schema: GenerateAffirmationOutputSchema},\r\n  prompt: `You are a mental wellness assistant for youths, skilled at providing encouraging and supportive affirmations.\r\n\r\n  Based on the user's current mood, generate a personalized affirmation to uplift and motivate them. The affirmation should be short, positive, and relevant to the user's potential emotional state.\r\n\r\n  Mood: {{{mood}}}\r\n\r\n  Affirmation:`,\r\n});\r\n\r\nconst generateAffirmationFlow = ai.defineFlow(\r\n  {\r\n    name: 'generateAffirmationFlow',\r\n    inputSchema: GenerateAffirmationInputSchema,\r\n    outputSchema: GenerateAffirmationOutputSchema,\r\n  },\r\n  async input => {\r\n    const {output} = await prompt(input);\r\n    return output!;\r\n  }\r\n);\r\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,iCAAiC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC9C,MAAM,uIAAA,CAAA,IAAC,CACJ,MAAM,GACN,QAAQ,GACR,QAAQ,CAAC;AACd;AAGA,MAAM,kCAAkC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC/C,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACnC;AAGO,eAAe,oBACpB,KAA+B;IAE/B,OAAO,wBAAwB;AACjC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAA8B;IAC9C,QAAQ;QAAC,QAAQ;IAA+B;IAChD,QAAQ,CAAC;;;;;;cAMG,CAAC;AACf;AAEA,MAAM,0BAA0B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC3C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IA5BoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 307, "column": 0}, "map": {"version":3,"sources":["file:///D:/h2skill/Manas_Mitra_Chatbot/src/ai/flows/empathetic-response-to-daily-checkin.ts"],"sourcesContent":["'use server';\r\n\r\n/**\r\n * @fileOverview Generates an empathetic and personalized response based on the user's daily check-in.\r\n *\r\n * - empatheticResponseToDailyCheckin - A function that generates an empathetic response.\r\n * - EmpatheticResponseToDailyCheckinInput - The input type for the empatheticResponseToDailyCheckin function.\r\n * - EmpatheticResponseToDailyCheckinOutput - The return type for the empatheticResponseToDailyCheckin function.\r\n */\r\n\r\nimport {ai} from '@/ai/genkit';\r\nimport {z} from 'genkit';\r\n\r\nconst EmpatheticResponseToDailyCheckinInputSchema = z.object({\r\n  mood: z.string().describe('The mood of the user reported in the daily check-in.'),\r\n  feelings: z.string().describe('The specific feelings the user is experiencing.'),\r\n  details: z.string().optional().describe('Additional details about the user\\'s day, if provided.'),\r\n});\r\nexport type EmpatheticResponseToDailyCheckinInput = z.infer<typeof EmpatheticResponseToDailyCheckinInputSchema>;\r\n\r\nconst EmpatheticResponseToDailyCheckinOutputSchema = z.object({\r\n  response: z.string().describe('An empathetic and personalized response to the user\\'s daily check-in.'),\r\n});\r\nexport type EmpatheticResponseToDailyCheckinOutput = z.infer<typeof EmpatheticResponseToDailyCheckinOutputSchema>;\r\n\r\nexport async function empatheticResponseToDailyCheckin(input: EmpatheticResponseToDailyCheckinInput): Promise<EmpatheticResponseToDailyCheckinOutput> {\r\n  return empatheticResponseToDailyCheckinFlow(input);\r\n}\r\n\r\nconst prompt = ai.definePrompt({\r\n  name: 'empatheticResponseToDailyCheckinPrompt',\r\n  input: {schema: EmpatheticResponseToDailyCheckinInputSchema},\r\n  output: {schema: EmpatheticResponseToDailyCheckinOutputSchema},\r\n  prompt: `You are an AI assistant designed to provide empathetic and personalized responses to youth based on their daily check-in.\r\n\r\n  Here is the information from their check-in:\r\n  Mood: {{{mood}}}\r\n  Feelings: {{{feelings}}}\r\n  Details: {{{details}}}\r\n\r\n  Based on this information, craft a supportive and understanding response. Acknowledge their feelings and offer encouragement.\r\n  Keep the response concise and easy to understand.\r\n  The response should be in first person.\r\n  Do not include any questions in the response.  Do not include any links or references to external resources.\r\n  The response should be no more than 5 sentences.\r\n  `,\r\n});\r\n\r\nconst empatheticResponseToDailyCheckinFlow = ai.defineFlow(\r\n  {\r\n    name: 'empatheticResponseToDailyCheckinFlow',\r\n    inputSchema: EmpatheticResponseToDailyCheckinInputSchema,\r\n    outputSchema: EmpatheticResponseToDailyCheckinOutputSchema,\r\n  },\r\n  async input => {\r\n    const {output} = await prompt(input);\r\n    return output!;\r\n  }\r\n);\r\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,8CAA8C,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC3D,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC1B,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;AAC1C;AAGA,MAAM,+CAA+C,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC5D,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAChC;AAGO,eAAe,iCAAiC,KAA4C;IACjG,OAAO,qCAAqC;AAC9C;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAA2C;IAC3D,QAAQ;QAAC,QAAQ;IAA4C;IAC7D,QAAQ,CAAC;;;;;;;;;;;;EAYT,CAAC;AACH;AAEA,MAAM,uCAAuC,mHAAA,CAAA,KAAE,CAAC,UAAU,CACxD;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IAhCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 378, "column": 0}, "map": {"version":3,"sources":["file:///D:/h2skill/Manas_Mitra_Chatbot/src/ai/flows/contextual-resource-recommendation.ts"],"sourcesContent":["'use server';\r\n/**\r\n * @fileOverview Provides contextual recommendations for wellness resources based on user check-in data.\r\n *\r\n * - contextualResourceRecommendation - A function that generates resource recommendations.\r\n * - ContextualResourceRecommendationInput - The input type for the contextualResourceRecommendation function.\r\n * - ContextualResourceRecommendationOutput - The return type for the contextualResourceRecommendation function.\r\n */\r\n\r\nimport {ai} from '@/ai/genkit';\r\nimport {z} from 'genkit';\r\n\r\nconst ContextualResourceRecommendationInputSchema = z.object({\r\n  checkInData: z\r\n    .string()\r\n    .describe(\r\n      'A string containing the youth\\'s check-in data, including mood and feelings.'\r\n    ),\r\n});\r\nexport type ContextualResourceRecommendationInput = z.infer<\r\n  typeof ContextualResourceRecommendationInputSchema\r\n>;\r\n\r\nconst ContextualResourceRecommendationOutputSchema = z.object({\r\n  resourceRecommendation: z.string().describe('A recommendation for a relevant wellness resource.'),\r\n});\r\nexport type ContextualResourceRecommendationOutput = z.infer<\r\n  typeof ContextualResourceRecommendationOutputSchema\r\n>;\r\n\r\nexport async function contextualResourceRecommendation(\r\n  input: ContextualResourceRecommendationInput\r\n): Promise<ContextualResourceRecommendationOutput> {\r\n  return contextualResourceRecommendationFlow(input);\r\n}\r\n\r\nconst prompt = ai.definePrompt({\r\n  name: 'contextualResourceRecommendationPrompt',\r\n  input: {schema: ContextualResourceRecommendationInputSchema},\r\n  output: {schema: ContextualResourceRecommendationOutputSchema},\r\n  prompt: `Based on the youth's check-in data: {{{checkInData}}}, recommend a relevant wellness resource and explain why it would be helpful.`,\r\n});\r\n\r\nconst contextualResourceRecommendationFlow = ai.defineFlow(\r\n  {\r\n    name: 'contextualResourceRecommendationFlow',\r\n    inputSchema: ContextualResourceRecommendationInputSchema,\r\n    outputSchema: ContextualResourceRecommendationOutputSchema,\r\n  },\r\n  async input => {\r\n    const {output} = await prompt(input);\r\n    return output!;\r\n  }\r\n);\r\n"],"names":[],"mappings":";;;;;AACA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,8CAA8C,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC3D,aAAa,uIAAA,CAAA,IAAC,CACX,MAAM,GACN,QAAQ,CACP;AAEN;AAKA,MAAM,+CAA+C,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC5D,wBAAwB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC9C;AAKO,eAAe,iCACpB,KAA4C;IAE5C,OAAO,qCAAqC;AAC9C;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAA2C;IAC3D,QAAQ;QAAC,QAAQ;IAA4C;IAC7D,QAAQ,CAAC,kIAAkI,CAAC;AAC9I;AAEA,MAAM,uCAAuC,mHAAA,CAAA,KAAE,CAAC,UAAU,CACxD;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IAtBoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 435, "column": 0}, "map": {"version":3,"sources":["file:///D:/h2skill/Manas_Mitra_Chatbot/src/lib/actions.ts"],"sourcesContent":["'use server';\r\n\r\nimport {\r\n  generateAffirmation,\r\n  type GenerateAffirmationInput,\r\n} from '@/ai/flows/daily-affirmations';\r\nimport {\r\n  empatheticResponseToDailyCheckin,\r\n  type EmpatheticResponseToDailyCheckinInput,\r\n} from '@/ai/flows/empathetic-response-to-daily-checkin';\r\nimport {\r\n  contextualResourceRecommendation\r\n} from '@/ai/flows/contextual-resource-recommendation';\r\n\r\nexport async function getAffirmation(input: GenerateAffirmationInput) {\r\n  const { affirmation } = await generateAffirmation(input);\r\n  return affirmation;\r\n}\r\n\r\nexport async function getCheckInResponse(\r\n  input: EmpatheticResponseToDailyCheckinInput & { checkInData: string }\r\n) {\r\n  const { checkInData, ...empatheticInput } = input;\r\n  const [empatheticResponse, resourceRecommendation] = await Promise.all([\r\n    empatheticResponseToDailyCheckin(empatheticInput),\r\n    contextualResourceRecommendation({ checkInData }),\r\n  ]);\r\n  return {\r\n    response: empatheticResponse.response,\r\n    recommendation: resourceRecommendation.resourceRecommendation,\r\n  };\r\n}\r\n"],"names":[],"mappings":";;;;;;AAEA;AAIA;AAIA;;;;;;;AAIO,eAAe,eAAe,KAA+B;IAClE,MAAM,EAAE,WAAW,EAAE,GAAG,MAAM,CAAA,GAAA,2IAAA,CAAA,sBAAmB,AAAD,EAAE;IAClD,OAAO;AACT;AAEO,eAAe,mBACpB,KAAsE;IAEtE,MAAM,EAAE,WAAW,EAAE,GAAG,iBAAiB,GAAG;IAC5C,MAAM,CAAC,oBAAoB,uBAAuB,GAAG,MAAM,QAAQ,GAAG,CAAC;QACrE,CAAA,GAAA,sKAAA,CAAA,mCAAgC,AAAD,EAAE;QACjC,CAAA,GAAA,8JAAA,CAAA,mCAAgC,AAAD,EAAE;YAAE;QAAY;KAChD;IACD,OAAO;QACL,UAAU,mBAAmB,QAAQ;QACrC,gBAAgB,uBAAuB,sBAAsB;IAC/D;AACF;;;IAjBsB;IAKA;;AALA,+OAAA;AAKA,+OAAA","debugId":null}},
    {"offset": {"line": 480, "column": 0}, "map": {"version":3,"sources":["file:///D:/h2skill/Manas_Mitra_Chatbot/.next-internal/server/app/check-in/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {getCheckInResponse as '403fa41d7ccfd75c68e9f49ab444671605baee140f'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 532, "column": 0}, "map": {"version":3,"sources":["file:///D:/h2skill/Manas_Mitra_Chatbot/src/components/check-in/check-in-flow.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const CheckInFlow = registerClientReference(\n    function() { throw new Error(\"Attempted to call CheckInFlow() from the server but CheckInFlow is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/check-in/check-in-flow.tsx <module evaluation>\",\n    \"CheckInFlow\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,cAAc,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC7C;IAAa,MAAM,IAAI,MAAM;AAAsO,GACnQ,2EACA","debugId":null}},
    {"offset": {"line": 546, "column": 0}, "map": {"version":3,"sources":["file:///D:/h2skill/Manas_Mitra_Chatbot/src/components/check-in/check-in-flow.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const CheckInFlow = registerClientReference(\n    function() { throw new Error(\"Attempted to call CheckInFlow() from the server but CheckInFlow is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/check-in/check-in-flow.tsx\",\n    \"CheckInFlow\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,cAAc,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC7C;IAAa,MAAM,IAAI,MAAM;AAAsO,GACnQ,uDACA","debugId":null}},
    {"offset": {"line": 560, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 570, "column": 0}, "map": {"version":3,"sources":["file:///D:/h2skill/Manas_Mitra_Chatbot/src/app/check-in/page.tsx"],"sourcesContent":["import { CheckInFlow } from \"@/components/check-in/check-in-flow\";\r\n\r\nexport default function CheckInPage() {\r\n    return (\r\n        <div className=\"container mx-auto max-w-2xl py-8 px-4\">\r\n            <CheckInFlow />\r\n        </div>\r\n    );\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;;;AAEe,SAAS;IACpB,qBACI,8OAAC;QAAI,WAAU;kBACX,cAAA,8OAAC,wJAAA,CAAA,cAAW;;;;;;;;;;AAGxB","debugId":null}}]
}